plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'java'
	id 'groovy'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'com.bmuschko.docker-remote-api' version '4.6.2'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin



group = 'com.rcronald.ms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

springBoot {
    buildInfo()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

bootJar {
  archiveName = 'microservice-project.jar'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'io.springfox:springfox-swagger2:2.6.1'
  implementation 'io.springfox:springfox-swagger-ui:2.6.1'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
  destFile = project.file('build/libs/Dockerfile')
  from 'openjdk:8u181-jre-slim-stretch'
  copyFile 'microservice-project.jar', '/opt/microservice-project.jar'
  exposePort 8080
  entryPoint 'java', "-Djava.awt.headless=true", "-Xms128m", "-Xmx128m", '-jar', '/opt/microservice-project.jar'
}

task buildDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
  dependsOn createDockerfile
  inputDir = createDockerfile.destFile.get().asFile.parentFile
  tags.add('rcronald/java-microservice-project:' + project.version.toLowerCase())
}

task pushDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
  dependsOn buildDockerImage
  imageName = buildDockerImage.tags.get().first()
}

docker {
  registryCredentials {
    url = (System.getenv('CONTAINER_REGISTRY_URL') ?: project.properties.getOrDefault('containerRegistryUrl', 'https://registry.hub.docker.io'))
    username = (System.getenv('CONTAINER_REGISTRY_USERNAME') ?: (project.hasProperty('containerRegistryUsername') ? containerRegistryUsername : '')) ?: ''
    password = (System.getenv('CONTAINER_REGISTRY_PASSWORD') ?: (project.hasProperty('containerRegistryPassword') ? containerRegistryPassword : '')) ?: ''
  }
}


createDockerfile.dependsOn bootJar